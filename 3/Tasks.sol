
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract Tasks {
	// Contract can have an instance variables.
	// In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
	// function call
	uint32 public timestamp;
	uint8 public taskNumber = 1;
	uint8 public taskCount = 0;
	string public task;
	string[] public taskNames;

	// Contract can have a `constructor` – function that will be called when contract will be deployed to the blockchain.
	// In this example constructor adds current time to the instance variable.
	// All contracts need call tvm.accept(); for succeeded deploy
	constructor() public {
		// Check that contract's public key is set
		require(tvm.pubkey() != 0, 101);
		// Check that message has signature (msg.pubkey() is not zero) and
		// message is signed with the owner's private key
		require(msg.pubkey() == tvm.pubkey(), 102);
		// The current smart contract agrees to buy some gas to finish the
		// current transaction. This actions required to process external
		// messages, which bring no value (henceno gas) with themselves.
		tvm.accept();

	}

	modifier checkOwnerAndAccept {
		// Check that message was signed with contracts key.
		require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
		_;
	}
	
	struct Task{
		string nameTask;
		uint32 timeStamp;
		bool done;
	}
	//Создаем ключ задания;
	mapping(uint8 => Task) taskKey;
	//Добавить Задачу
	function addTask(string value) public checkOwnerAndAccept{
		timestamp = now;
		taskKey[taskNumber] = Task(value, timestamp, false);
		//Номер Задачи
		taskNumber++;
		taskCounts();
		fTaskNames();
	}
	//Количество Задач
	function taskCounts() public checkOwnerAndAccept{
		uint8 n = 0;
		uint8 t = taskNumber;
		//Перебор акктивных задач
		for(uint8 i = 0; i < t; i++){
			if(taskKey[i].done == false){
				n++;
			}
		}
		//количество задач
		taskCount = n-1;
		nameTaskKey(taskCount);
	}
	//Отобразить список задач
	function fTaskNames() public checkOwnerAndAccept{
		delete taskNames;
		for(uint8 i = 0 ; i < taskNumber; i++){
			taskNames.push(taskKey[i].nameTask);
		}
	}
	//Получить Задачу по ключу
	function nameTaskKey(uint8 value) public checkOwnerAndAccept{
		task = taskKey[value].nameTask;
	}
	//Удалить Задачу по ключу
	function delTask(uint8 value) public checkOwnerAndAccept{
		delete taskKey[value-1];
		taskCounts();
		fTaskNames();
	}
	//Отметит задачу как выполненую по ключу
	function doneTask(uint8 value) public checkOwnerAndAccept{
		taskKey[value].done = true;
		taskCounts();
		fTaskNames();
	}
}
